import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onMount, a as authenticated, g as globals, e as element, t as text, c as claim_element, b as children, f as claim_text, h as detach_dev, j as add_location, k as insert_hydration_dev, l as append_hydration_dev, n as noop } from './client.55904bd6.js';

/* src\routes\index.svelte generated by Svelte v3.49.0 */

const { console: console_1 } = globals;
const file = "src\\routes\\index.svelte";

function create_fragment(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text("dashboard");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			t = claim_text(div_nodes, "dashboard");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file, 51, 0, 1398);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Routes', slots, []);
	let id = "", first_name = "", last_name = "", email = "", token = "";

	onMount(async () => {
		try {
			authenticated.subscribe(async value => {
				if (value) {
					await fetch("http://localhost:4000/api/online-course/sessions/current-user", {
						method: "GET",
						headers: {
							Accept: "application/json",
							"Content-Type": "application/x-www-form-urlencoded",
							Authorization: `${value}`
						}
					}).then(response => response.json()).then(async responseJson => {
						if (responseJson.metadata.http_code == "200") {
							id = responseJson.data.id;
							first_name = responseJson.data.first_name;
							last_name = responseJson.data.last_name;
							email = responseJson.data.email;
							token = value;
						}
					}).catch(error => {
						console.error(error);
						token = "";
					});
				} else {
					window.location.href = "/login";
				}
			});
		} catch(e) {
			authenticated.set("");
			token = "";
			window.location.href = "/login";
		}
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		onMount,
		authenticated,
		id,
		first_name,
		last_name,
		email,
		token
	});

	$$self.$inject_state = $$props => {
		if ('id' in $$props) id = $$props.id;
		if ('first_name' in $$props) first_name = $$props.first_name;
		if ('last_name' in $$props) last_name = $$props.last_name;
		if ('email' in $$props) email = $$props.email;
		if ('token' in $$props) token = $$props.token;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYjY0MDAxMTAuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gIGltcG9ydCB7IGF1dGhlbnRpY2F0ZWQgfSBmcm9tIFwiLi4vc3RvcmVzL2F1dGhcIjtcblxuICBsZXQgaWQgPSBcIlwiLFxuICAgIGZpcnN0X25hbWUgPSBcIlwiLFxuICAgIGxhc3RfbmFtZSA9IFwiXCIsXG4gICAgZW1haWwgPSBcIlwiLFxuICAgIHRva2VuID0gXCJcIjtcblxuICBvbk1vdW50KGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXV0aGVudGljYXRlZC5zdWJzY3JpYmUoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGF3YWl0IGZldGNoKFxuICAgICAgICAgICAgXCJodHRwOi8vbG9jYWxob3N0OjQwMDAvYXBpL29ubGluZS1jb3Vyc2Uvc2Vzc2lvbnMvY3VycmVudC11c2VyXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgJHt2YWx1ZX1gLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfVxuICAgICAgICAgIClcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAgICAgLnRoZW4oYXN5bmMgKHJlc3BvbnNlSnNvbikgPT4ge1xuICAgICAgICAgICAgICBpZiAocmVzcG9uc2VKc29uLm1ldGFkYXRhLmh0dHBfY29kZSA9PSBcIjIwMFwiKSB7XG4gICAgICAgICAgICAgICAgaWQgPSByZXNwb25zZUpzb24uZGF0YS5pZDtcbiAgICAgICAgICAgICAgICBmaXJzdF9uYW1lID0gcmVzcG9uc2VKc29uLmRhdGEuZmlyc3RfbmFtZTtcbiAgICAgICAgICAgICAgICBsYXN0X25hbWUgPSByZXNwb25zZUpzb24uZGF0YS5sYXN0X25hbWU7XG4gICAgICAgICAgICAgICAgZW1haWwgPSByZXNwb25zZUpzb24uZGF0YS5lbWFpbDtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IHZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgdG9rZW4gPSBcIlwiO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcIi9sb2dpblwiO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBhdXRoZW50aWNhdGVkLnNldChcIlwiKTtcbiAgICAgIHRva2VuID0gXCJcIjtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCIvbG9naW5cIjtcbiAgICB9XG4gIH0pO1xuPC9zY3JpcHQ+XG5cbjxkaXY+ZGFzaGJvYXJkPC9kaXY+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7WUFtREssV0FBUzs7Ozs7OzZCQUFULFdBQVM7Ozs7Ozs7O0dBQWQsb0JBQW9COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBL0NkLEVBQUUsR0FBRyxFQUFFLEVBQ1QsVUFBVSxHQUFHLEVBQUUsRUFDZixTQUFTLEdBQUcsRUFBRSxFQUNkLEtBQUssR0FBRyxFQUFFLEVBQ1YsS0FBSyxHQUFHLEVBQUU7O0NBRVosT0FBTzs7R0FFSCxhQUFhLENBQUMsU0FBUyxPQUFRLEtBQUs7UUFDOUIsS0FBSztXQUNELEtBQUssQ0FDVCwrREFBK0Q7TUFFN0QsTUFBTSxFQUFFLEtBQUs7TUFDYixPQUFPO09BQ0wsTUFBTSxFQUFFLGtCQUFrQjtPQUMxQixjQUFjLEVBQUUsbUNBQW1DO09BQ25ELGFBQWEsS0FBSyxLQUFLOztRQUkxQixJQUFJLENBQUUsUUFBUSxJQUFLLFFBQVEsQ0FBQyxJQUFJLElBQ2hDLElBQUksT0FBUSxZQUFZO1VBQ25CLFlBQVksQ0FBQyxRQUFRLENBQUMsU0FBUyxJQUFJLEtBQUs7T0FDMUMsRUFBRSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRTtPQUN6QixVQUFVLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVO09BQ3pDLFNBQVMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVM7T0FDdkMsS0FBSyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSztPQUMvQixLQUFLLEdBQUcsS0FBSzs7UUFHaEIsS0FBSyxDQUFFLEtBQUs7TUFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUs7TUFDbkIsS0FBSyxHQUFHLEVBQUU7OztLQUdkLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLFFBQVE7OztVQUc1QixDQUFDO0dBQ1IsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0dBQ3BCLEtBQUssR0FBRyxFQUFFO0dBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
